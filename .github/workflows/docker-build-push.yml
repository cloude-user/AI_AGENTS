name: Build, Tag, Push to ECR

on:
  # workflow_dispatch:
  #   inputs:
  #     bump:
  #       description: 'Which part to bump: major|minor|patch'
  #       type: choice
  #       options:
  #         - major
  #         - minor
  #         - patch
  #       required: true
  #       default: 'patch'
  pull_request:
    branches:
      - main
    paths:
      - 'email_agent/src/**'
    types: [opened, synchronize, reopened]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO_NAME: gmail-agent

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # required for checkout
      id-token: write   # required for OIDC assume role
      issues: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials via OIDC (Assume Role)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{secrets.TERRAFORM_ROLE  }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fetch all tags and history
        run: |
          git fetch --depth=0 --tags
          echo "Available tags:"
          git tag --sort=-version:refname | head -10

      - name: Determine semver tag
        id: semver
        run: |
          set -euo pipefail
          bump="${{ github.event.inputs.bump || 'patch' }}"
          echo "Bump type: $bump"
          
          # Get the latest tag from all fetched tags
          latest=$(git tag --sort=-version:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -1 || echo "v0.0.0")
          echo "Raw latest tag found: $latest"
          
          # Remove 'v' prefix if present
          latest=${latest#v}
          echo "Latest version (without v): $latest"
          
          # Parse version components with better error handling
          if [[ "$latest" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            maj=${BASH_REMATCH[1]}
            min=${BASH_REMATCH[2]}
            pat=${BASH_REMATCH[3]}
          else
            echo "No valid semver tags found, starting from 0.0.0"
            maj=0; min=0; pat=0
          fi
          
          echo "Current version: $maj.$min.$pat"
          
          # Increment based on bump type
          if [ "$bump" = "major" ]; then
            maj=$((maj + 1)); min=0; pat=0
          elif [ "$bump" = "minor" ]; then
            min=$((min + 1)); pat=0
          else
            pat=$((pat + 1))
          fi
          
          new="v${maj}.${min}.${pat}"
          echo "Previous version: v$latest"
          echo "New version: $new"
          echo "new_tag=$new" >> "$GITHUB_OUTPUT"

      - name: Create and push tag (if not existing)
        id: push_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          new_tag=${{ steps.semver.outputs.new_tag }}
          
          # Fetch tags again to be sure
          git fetch --tags
          
          # Check if tag already exists
          if git show-ref --tags --quiet --verify -- "refs/tags/$new_tag"; then
            echo "Tag $new_tag already exists."
            echo "Existing tags:"
            git tag --sort=-version:refname | head -5
            exit 1
          else
            echo "Creating new tag: $new_tag"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "$new_tag"
            git push origin "$new_tag"
            echo "Successfully pushed tag $new_tag"
          fi
          
          echo "image_tag=${new_tag#v}" >> $GITHUB_OUTPUT

      - name: Login to ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

      - name: Build and tag Docker image
        id: build-image
        env:
          IMAGE_TAG: ${{ steps.push_tag.outputs.image_tag }}
          ECR_URI: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_NAME }}
        run: |
          echo "Building image with tag: $IMAGE_TAG"
          
          # Build the Docker image
          docker build -t ${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} email_agent/src/
          
          # Tag for ECR
          docker tag ${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} ${{ env.ECR_URI }}:${{ env.IMAGE_TAG }}
          
          echo "built_image=${{ env.ECR_URI }}:${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"
          echo "Built and tagged image: ${{ env.ECR_URI }}:${{ env.IMAGE_TAG }}"

      - name: Push image to ECR
        id: push-image
        run: |
          IMAGE_TAG=${{ steps.push_tag.outputs.image_tag }}
          ECR_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}
          
          echo "Pushing image: ${ECR_URI}:${IMAGE_TAG}"
          docker push ${ECR_URI}:${IMAGE_TAG}
          docker push ${ECR_URI}:latest
          
          echo "pushed_image=${ECR_URI}:${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Successfully pushed: ${ECR_URI}:${IMAGE_TAG}"